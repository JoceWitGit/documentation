
## Ports, sockets and tunneling

Following a URL such as 123.213.101.102 you may see a colon followed by a number, as in: 123.213.101.102:8001. 
This following number is a port, per wikipedia 'a networking endpoint in an operating system'. A port in 
this context means a dedicated signal wire. By directing applications to a port you build a 
dedicated send/receive connection. This is particularly useful in getting two computers to talk to one another.

For completeness there is a related concept called a [socket](https://en.wikipedia.org/wiki/Network_socket) 
which we do not need in this discussion. 

We proceed with a particularly important cloud-oriented use of ports. Suppose you have a cloud VM instance 
You wish to run some software that uses a Graphical User Interface (GUI). In this case let's consider the
common example of a [Jupyter notebook](az_jupyter.html). Here a remote Jupyter notebook server is accustomed to
talking to your machine via your local browser. 
The commands below follow [this reference](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh).

Let's assume you log in to the cloud VM using ssh.  There you issue 

```
% jupyter notebook --no-browser --port=8889
```

This is directing the jupyter application to pay attention to port 8889.
Next, on your local machine, say a laptop for example, you would issue: 

```
% ssh -N -f -i ~/.ssh/credential_filename.pem -L localhost:7005:localhost:8889 username@123.213.101.102
```

Notice this uses the ssh command. If you are using a Windows PC it is common to connect using PuTTY (see below).

Next on your local machine open a browser and in the address bar enter:

```
localhost:7005
```

I did have to set my password to an empty string using a Jupyter config file, due to the new Jupyter permissions default settings.
The extra -i flag with the laptop ssh call.  

## PuTTY 

The Windows PC environment does not yet support the **ssh** command and consequently cloud VM connections typically
use the PuTTY application. (You may also look into 
[alternative options](http://web.archive.org/web/20130806071308/http://huddledmasses.org/scriptable-ssh-from-powershell/)). 
PuTTY is a slightly circuitous but perfectly reliable means of connecting with a cloud VM, supporting as it does several
communication protocols including ssh. 

The main thing to know is that a VM credential file with a .pem extension does not work with PuTTY. You can use the companion
application PuTTYgen to convert this file to an equivalent file with a .ppk file extension.  The PuTTY program can then use 
this credential file to connect to a cloud VM. 

kilroy need screencap of PuTTYgen in operation and the menu location for specifying a .ppk file.

kilroy need text and screencap showing use of PuTTY to accomplish the Jupyter tunnel given above; and copy to the all Jupyter pages as well. 

## Python connections

### Exclam

## Linux connections

### curl 

Per Wikipedia, [**curl**](https://en.wikipedia.org/wiki/CURL) is a command line tool for getting or sending files 
using [URL](https://en.wikipedia.org/wiki/Uniform_Resource_Locator) syntax. 
[See this link for Curl usage](http://www.computerhope.com/unix/curl.htm).

