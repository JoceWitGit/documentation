
below to part 2 is now suspect...

### In either case

Sometimes EC2 instances reboot; and when they do they stop running the Jupyter server. It is 
generally re-started manually. However the rc startup file structure can be configured to 
re-launch Jupyter when your EC2 instance reboots. (kilroy is this documented here yet?)

part 2



## Procedure

The links we give above or a quick internet search are quite possibly better resources than our
notes given here.

- Spin up an AWS instance with Ubuntu AMI and install [Anaconda](https://docs.continuum.io/anaconda/install)
- Install Jupyter Notebook 

```
% sudo apt-get install jupyter-notebook
```

Once you've installed Jupyter Notebook, follow the steps below:














```
% jupyter notebook --generate-config 
```

Then launch ipython and generate a hashed password to add to the configuration file you generated:

```
% ipython

In [1]: from notebook.auth import passwd
In [2]: passwd()
Enter password:
Verify password:
Out[2]: 'sha1:--long_string_of_characters--'
```

The "sha1:--string--" is a hashed password. It is used below in a configuration file.

Generate a self-signed certificate using openssl so that your hashed password is encrypted

```
$ openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mykey.key -out mycert.pem
```



















The Windows PC environment does not yet support the **ssh** command and consequently cloud VM connections typically
use the PuTTY application. (There are also 
[alternative options](http://web.archive.org/web/20130806071308/http://huddledmasses.org/scriptable-ssh-from-powershell/) ). 
PuTTY is a slightly circuitous but perfectly reliable means of connecting with a cloud VM, supporting as it does several
communication protocols including ssh. 

The main point here is that a VM credential file with a *.pem* extension does not work with PuTTY. You can use the companion
application PuTTYgen to convert this file to an equivalent file with a .ppk file extension.  The PuTTY program can then use 
this credential file to connect to a cloud VM. 

kilroy need screencap of PuTTYgen in operation and the menu location for specifying a .ppk file.

kilroy need text and screencap showing use of PuTTY to accomplish the Jupyter tunnel given above; and copy to the all Jupyter pages as well. 

## Python connections

### Exclam

## Linux connections

### curl 

Per Wikipedia, [**curl**](https://en.wikipedia.org/wiki/CURL) is a command line tool for getting or sending files 
using [URL](https://en.wikipedia.org/wiki/Uniform_Resource_Locator) syntax. 
[See this link for Curl usage](http://www.computerhope.com/unix/curl.htm).

Set Jupyter Notebook to use the certificate when it starts: 

```
$ jupyter notebook --certfile=mycert.pem --keyfile mykey.key
```

You can also set the Jupyter Notebook to use the certificate when it starts by editing the configuration file:

```
$ vi ~/.jupyter/jupyter_notebook_config.py
```

You will want to add the following lines to the config file (or uncomment those lines -- remove the hashes): 

```bash
# Set options for certfile, ip, password, and toggle off
# browser auto-opening
c.NotebookApp.certfile = u'/absolute/path/to/your/certificate/mycert.pem'
c.NotebookApp.keyfile = u'/absolute/path/to/your/certificate/mykey.key'
# Set ip to '*' to bind on all interfaces (ips) for the public server
c.NotebookApp.ip = '*'
c.NotebookApp.password = u'sha1:--long_string_of_characters--'
c.NotebookApp.open_browser = False

# It is a good idea to set a known, fixed port for server access
c.NotebookApp.port = 9999
```

Note: You must open port 9999 on the EC2 instance. You can do this from the AWS console using the 
Security Groups and Inbound rules.

Note: If http://ipaddress:9999 doesn't work, use https://ipaddress:9999.  

## Creating Alarms for Jupyter Notebook Service

kilroy this part is not in place yet; see source nbk

## Jupyter notebook auto-restart

This section describes how to set your Jupyter notebook server to start automatically on reboot so you do not 
have to log in to your EC2 instance and type 

```
% jupyter notebook
``` 

whenever it restarts -- which might be once every couple days or so.  The example below assumes the Jupyter 
notebook server is installed through Anaconda.  It also assumes that you have an EC2 instance running Ubuntu. 

Download [this script](https://gist.github.com/Doowon/38910829898a6624ce4ed554f082c4dd) and save it 
on your EC2 instance as /etc/init.d/jupyter.  Edit this file to make this modification:

```
> DAEMON=/home/ubuntu/anaconda3/bin/jupyter-notebook
```

Make sure there is a /var/log/jupyter/ folder. If necessary create one using **sudo mkdir**.

Issue the following sequence from the command line. Respectively these make the init.d file executable, 
generate a Jupyter config file, start the jupyter service, update the rc process, and stop the jupyter 
service. Once this is done you can reboot the instance and make sure the Jupyter service has started
properly.

kilroy the above text should be verified as correct. 

```
% sudo chmod +x /etc/init.d/jupyter
% sudo jupyter --generate-config -f /etc/jupyter/jupyter_config.py
% sudo service jupyter start
% sudo update-rc.d jupyter defaults
% sudo service jupyterhub stop
```

